// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1 - User (mantendo igual)
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores    Store[]
  lojas_admin Loja_admin[]
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
  orders    Order[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  image       String?
  status      String   @default("Ativo")
  inventory   Int      @default(0)
  shipping    Boolean  @default(true)
  shopify_id  String?  @unique
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  storeId   String
  store     Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  status    String      @default("pending") // pending, processing, completed, cancelled
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 2 - Admin (adicionando colunas)
model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  name      String?
  email     String?
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 3 - Loja_Shopify
model Loja_Shopify {
  id            String   @id @default(uuid())
  chave_api     String
  chave_secreta String
  token_api     String
  dominio_api   String
  id_loja       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// 4 - Pedidos (pedidos realizados/finalizados)
model Pedidos {
  id                String   @id @default(uuid())
  id_loja           String
  id_carrinho       String?  // Referência ao carrinho que originou o pedido
  // Dados do cliente
  nome              String?
  email             String?
  telefone          String?
  cpf               String?
  cep               String?
  endereco          String?
  numero            String?
  complemento       String?
  bairro            String?
  cidade            String?
  estado            String?
  // Dados do pedido
  itens             Json     // Array de objetos com produtos e quantidades
  valor_total       Float?
  valor_frete       Float?
  metodo_pagamento  String?  // card, pix, boleto
  status            String   @default("pending") // pending, realizado, processando, enviado, entregue, cancelado
  session_id        String?  // Para identificar sessão única
  ip_cliente        String?
  user_agent        String?
  // Dados específicos do pedido
  numero_pedido     String?  // Número único do pedido
  observacoes       String?  // Observações do cliente
  // Dados UTM para análise de marketing
  utm_source        String?  // Origem do tráfego (ex: google, facebook)
  utm_medium        String?  // Meio de marketing (ex: cpc, email, social)
  utm_campaign      String?  // Nome da campanha
  utm_term          String?  // Termo da palavra-chave
  utm_content       String?  // Conteúdo do anúncio
  // Timestamps
  finalizado_em     DateTime @default(now()) // Quando o pedido foi finalizado
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([id_loja])
  @@index([id_carrinho])
  @@index([status])
  @@index([session_id])
  @@index([email])
  @@index([numero_pedido])
}

// 5 - Loja_Landingpage
model Loja_Landingpage {
  id        String   @id @default(uuid())
  nome      String
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 6 - Loja_Wordpress
model Loja_Wordpress {
  id        String   @id @default(uuid())
  nome      String
  url       String?
  api_key   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 7 - Orderbump
model Orderbump {
  id                String   @id @default(uuid())
  id_loja           String   // ID da loja que possui o order bump
  nome              String   // Nome do order bump
  todos_produtos    Boolean  @default(false) // Se aplica a todos os produtos ou específicos
  produtos_aplicados Json?   // Array de IDs de produtos aos quais o order bump se aplica
  produto_id        String   // ID do produto que será oferecido no order bump
  tipo_desconto     String   // Tipo de desconto: "porcentagem" ou "valor"
  valor_desconto    Float    // Valor do desconto (em % ou R$)
  preco_final       Float    // Preço final após aplicar o desconto
  ativo             Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([id_loja])
  @@index([produto_id])
  @@index([ativo])
}

// 8 - Upssel
model Upssel {
  id        String   @id @default(uuid())
  titulo    String
  descricao String?
  valor     Float
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 9 - Frete (opções de frete da loja)
model Frete {
  id                    String   @id @default(uuid())
  nome                  String   // Nome da opção de frete (ex: "Sedex", "PAC")
  preco                 Float    // Preço do frete
  prazo_minimo          Int      // Prazo mínimo de entrega em dias
  prazo_maximo          Int      // Prazo máximo de entrega em dias
  ativo                 Boolean  @default(true) // Se a opção está ativa
  id_loja               String   // ID da loja
  // Configuração de frete grátis
  frete_gratis_ativo    Boolean  @default(false) // Se o frete grátis está ativo
  valor_minimo_gratis   Float?   // Valor mínimo para frete grátis
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([id_loja])
  @@index([ativo])
}

// 10 - Adquirentes
model Adquirentes {
  id        String   @id @default(uuid())
  nome      String
  tipo      String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 11 - Checkout (adicionando id_loja)
model Checkout {
  id                   String   @id @default(uuid())
  Tema                 String?
  Logo                 String?
  Favicon              String?
  Corbarra             String?
  Corbotao             String?
  Contagemregressiva   Boolean  @default(false)
  BarraTexto           String?
  id_loja              String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

// 12 - Produtos (adicionando id_loja)
model Produtos {
  id                    String   @id @default(uuid())
  id_loja               String
  Titulo                String
  Descricao             String?
  valor                 Float
  valordesconto         Float?
  Imagem                String?
  Altura                Float?
  Largura               Float?
  Comprimento           Float?
  shopify_produto_id    String?
  shopify_variante_id   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// 13 - Pixel
model Pixel {
  id        String   @id @default(uuid())
  nome      String?
  codigo    String?
  tipo      String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 14 - Loja_admin (mantendo exatamente igual)
model Loja_admin {
  id        String   @id @default(uuid())
  user_id   String
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Nome      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  config    Loja_config?
}

// 15 - Loja_config (configurações da loja)
model Loja_config {
  id        String   @id @default(uuid())
  id_loja   String   @unique
  loja      Loja_admin @relation(fields: [id_loja], references: [id], onDelete: Cascade)
  logo      String?
  cor_tema  String?
  cor_botao String?
  aviso     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 16 - Carrinho (carrinhos abandonados)
model Carrinho {
  id                String   @id @default(uuid())
  id_loja           String
  // Dados do cliente
  nome              String?
  // Relacionamentos
  itensCarrinho     ItemCarrinho[]
  email             String?
  telefone          String?
  cpf               String?
  cep               String?
  endereco          String?
  numero            String?
  complemento       String?
  bairro            String?
  cidade            String?
  estado            String?
  // Dados do carrinho
  itens             Json     // Array de objetos com produtos e quantidades
  valor_total       Float?
  valor_frete       Float?
  metodo_pagamento  String?
  status            String   @default("abandonado") // abandonado, finalizado
  session_id        String?  // Para identificar sessão única
  ip_cliente        String?
  user_agent        String?
  // Dados UTM para análise de marketing
  utm_source        String?  // Origem do tráfego (ex: google, facebook)
  utm_medium        String?  // Meio de marketing (ex: cpc, email, social)
  utm_campaign      String?  // Nome da campanha
  utm_term          String?  // Termo da palavra-chave
  utm_content       String?  // Conteúdo do anúncio
  // Timestamps
  primeira_etapa_em DateTime? // Quando completou identificação
  ultima_atividade  DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([id_loja])
  @@index([session_id])
  @@index([email])
  @@index([status])
}

// 17 - Dominios (domínios personalizados)
model Dominios {
  id            String   @id @default(uuid())
  id_loja       String   // ID da loja que possui o domínio
  dominio       String   @unique // Domínio personalizado (ex: meusite.com.br)
  subdominio    String   @default("checkout") // Subdomínio usado (ex: checkout)
  status        String   @default("pending") // pending, verified, failed, inactive
  dns_verificado Boolean @default(false) // Se o DNS foi verificado com sucesso
  ssl_ativo     Boolean @default(false) // Se o SSL está ativo
  ssl_certificate_id String? @unique // ID do certificado SSL associado
  cloudflare_zone_id String? // ID da zona no Cloudflare
  ultima_verificacao DateTime? // Última vez que foi verificado
  configuracao_dns Json? // Configurações DNS necessárias
  erro_verificacao String? // Último erro de verificação, se houver
  ativo         Boolean @default(true) // Se o domínio está ativo
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamento com certificado SSL
  ssl_certificate SSL_certificates? @relation(fields: [ssl_certificate_id], references: [id])

  @@index([id_loja])
  @@index([dominio])
  @@index([status])
  @@index([dns_verificado])
  @@index([ssl_certificate_id])
}

// 18 - CheckoutSession (sessões de checkout em tempo real)
model CheckoutSession {
  id                String   @id @default(uuid())
  id_loja           String   // ID da loja
  session_id        String   @unique // ID único da sessão
  // Dados do cliente
  nome              String?  // Nome do cliente ("Cliente Anônimo" se não informado)
  email             String?
  telefone          String?
  // Estado atual do checkout
  etapa_atual       String   @default("carrinho") // carrinho, dados_pessoais, endereco, pagamento, revisao, finalizado
  // Produtos no carrinho
  itens             Json     // Array de objetos com produtos e quantidades
  valor_total       Float?
  // Dados de rastreamento
  ip_cliente        String?
  user_agent        String?
  entrada_em        DateTime @default(now()) // Quando entrou no checkout
  ultima_atividade  DateTime @default(now()) // Última atividade registrada
  saida_em          DateTime? // Quando saiu do checkout (null = ainda ativo)
  ativo             Boolean  @default(true) // Se a sessão está ativa
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([id_loja])
  @@index([session_id])
  @@index([ativo])
  @@index([etapa_atual])
  @@index([entrada_em])
}

// 19 - SSL_certificates (certificados SSL)
model SSL_certificates {
  id                    String   @id @default(uuid())
  domain                String   @unique // Domínio do certificado (ex: checkout.meusite.com.br)
  certificate           String   @db.Text // Certificado em formato PEM
  private_key           String   @db.Text // Chave privada em formato PEM
  certificate_chain     String?  @db.Text // Cadeia de certificados
  cert_path             String?  // Caminho do arquivo do certificado
  key_path              String?  // Caminho do arquivo da chave privada
  chain_path            String?  // Caminho do arquivo da cadeia
  status                String   @default("active") // active, expired, revoked, pending
  provider              String   @default("letsencrypt") // letsencrypt, custom, etc
  expires_at            DateTime // Data de expiração
  auto_renew            Boolean  @default(true) // Se deve renovar automaticamente
  last_renewal_attempt  DateTime? // Última tentativa de renovação
  renewed_at            DateTime? // Última renovação bem-sucedida
  renewal_error         String?  // Último erro de renovação
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relacionamento com domínio
  dominio               Dominios?

  @@index([domain])
  @@index([status])
  @@index([expires_at])
  @@index([auto_renew])
}

// 20 - SSL_renewal_logs (logs de renovação SSL)
model SSL_renewal_logs {
  id                    String   @id @default(uuid())
  executed_at           DateTime @default(now()) // Quando foi executado
  certificates_processed Int     @default(0) // Quantos certificados foram processados
  successful_renewals   Int      @default(0) // Quantas renovações foram bem-sucedidas
  failed_renewals       Int      @default(0) // Quantas renovações falharam
  details               Json?    // Detalhes da execução (sucessos e falhas)
  execution_time_ms     Int?     // Tempo de execução em milissegundos
  createdAt             DateTime @default(now())

  @@index([executed_at])
}

// 21 - Cloudflare_config (configurações do Cloudflare)
model Cloudflare_config {
  id            String   @id @default(uuid())
  id_loja       String   @unique // ID da loja
  api_token     String   // Token da API do Cloudflare
  email         String?  // Email da conta Cloudflare (opcional para tokens)
  zone_id       String?  // ID da zona principal (opcional)
  zone_name     String?  // Nome da zona principal (ex: meusite.com)
  account_id    String?  // ID da conta Cloudflare
  ativo         Boolean  @default(true) // Se a configuração está ativa
  last_sync     DateTime? // Última sincronização com Cloudflare
  sync_error    String?  // Último erro de sincronização
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  zones         Cloudflare_zones[]
  dns_records   Cloudflare_dns_records[]

  @@index([id_loja])
  @@index([ativo])
}

// 22 - Cloudflare_zones (zonas do Cloudflare)
model Cloudflare_zones {
  id                String   @id @default(uuid())
  cloudflare_id     String   @unique // ID da zona no Cloudflare
  name              String   // Nome da zona (ex: meusite.com)
  status            String   // active, pending, initializing, moved, deleted, deactivated
  paused            Boolean  @default(false) // Se a zona está pausada
  type              String   @default("full") // full, partial, secondary
  development_mode  Int      @default(0) // Tempo restante do modo de desenvolvimento
  name_servers      Json?    // Name servers da zona
  original_name_servers Json? // Name servers originais
  original_registrar String? // Registrador original
  original_dnshost  String?  // Host DNS original
  created_on        DateTime? // Data de criação no Cloudflare
  modified_on       DateTime? // Data de modificação no Cloudflare
  activated_on      DateTime? // Data de ativação no Cloudflare
  // Campos SSL
  ssl_enabled       Boolean  @default(false) // Se SSL Universal está ativo
  ssl_mode          String?  // off, flexible, full, strict
  ssl_activated_at  DateTime? // Data de ativação do SSL
  always_use_https  Boolean  @default(false) // Se Always Use HTTPS está ativo
  // Relacionamento com configuração
  config_id         String
  config            Cloudflare_config @relation(fields: [config_id], references: [id], onDelete: Cascade)
  // Timestamps locais
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  dns_records       Cloudflare_dns_records[]

  @@index([cloudflare_id])
  @@index([name])
  @@index([status])
  @@index([config_id])
}

// 23 - Cloudflare_dns_records (registros DNS do Cloudflare)
model Cloudflare_dns_records {
  id            String   @id @default(uuid())
  cloudflare_id String   @unique // ID do registro no Cloudflare
  zone_id       String   // ID da zona local
  zone          Cloudflare_zones @relation(fields: [zone_id], references: [id], onDelete: Cascade)
  config_id     String   // ID da configuração
  config        Cloudflare_config @relation(fields: [config_id], references: [id], onDelete: Cascade)
  // Dados do registro DNS
  type          String   // A, AAAA, CNAME, MX, TXT, etc.
  name          String   // Nome do registro (ex: checkout, www, @)
  content       String   // Conteúdo do registro (IP, domínio, etc.)
  ttl           Int      @default(1) // TTL (1 = automatic)
  priority      Int?     // Prioridade (para MX, SRV)
  proxied       Boolean  @default(false) // Se está sendo proxied pelo Cloudflare
  // Metadados
  proxiable     Boolean  @default(false) // Se pode ser proxied
  locked        Boolean  @default(false) // Se está bloqueado
  // Timestamps do Cloudflare
  created_on    DateTime? // Data de criação no Cloudflare
  modified_on   DateTime? // Data de modificação no Cloudflare
  // Timestamps locais
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([cloudflare_id])
  @@index([zone_id])
  @@index([config_id])
  @@index([type])
  @@index([name])
  @@index([proxied])
}

// 24 - Marketing (campanhas de email marketing)
model Marketing {
  id        String   @id @default(uuid())
  id_loja   String   // ID da loja que possui a campanha
  tipo      String   @default("email") // Tipo da campanha (email, sms, etc.)
  evento    String   // Evento que dispara a campanha (abandono_carrinho, pos_compra, etc.)
  tempo     Int      // Tempo em minutos após o evento para enviar
  mensagem  String   @db.Text // Conteúdo da mensagem/template do email
  assunto   String?  // Assunto do email
  status    String   @default("ativo") // ativo, inativo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com eventos
  eventos   MarketingEvents[]

  @@index([id_loja])
  @@index([evento])
  @@index([status])
}

// 25 - MarketingEvents (eventos de marketing agendados)
model MarketingEvents {
  id             String   @id @default(uuid())
  id_loja        String
  template_id    String
  session_id     String
  evento         String   // 'abandono_carrinho', etc
  email_cliente  String?
  nome_cliente   String?
  dados_evento   Json?    // dados específicos do evento (itens, valores, etc)
  agendado_para  DateTime // quando o email deve ser enviado
  enviado_em     DateTime?
  status         String   @default("pendente") // 'pendente', 'enviado', 'erro', 'cancelado'
  erro_envio     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamento com template
  template       Marketing @relation(fields: [template_id], references: [id], onDelete: Cascade)

  @@index([id_loja])
  @@index([session_id])
  @@index([evento])
  @@index([status])
  @@index([agendado_para])
  @@index([template_id])
}

// 26 - ItemCarrinho (itens do carrinho)
model ItemCarrinho {
  id            String   @id @default(uuid())
  carrinhoId    String
  produtoId     String
  quantidade    Int
  precoUnitario Float
  isOrderBump   Boolean  @default(false) // Indica se o item foi adicionado via Order Bump
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  carrinho      Carrinho @relation(fields: [carrinhoId], references: [id], onDelete: Cascade)

  @@index([carrinhoId])
  @@index([produtoId])
  @@index([isOrderBump])
}
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Configura√ß√£o padr√£o: sempre remover certificados auto-assinados
const AUTO_REMOVE_SELF_SIGNED = process.env.AUTO_REMOVE_SELF_SIGNED !== 'false';

async function forceLetsEncrypt(targetDomain = null) {
  try {
    console.log('üîÑ For√ßando regenera√ß√£o com Let\'s Encrypt...');
    
    // Determinar qual dom√≠nio usar
    const searchDomain = targetDomain || 'zollim.store';
    console.log(`üéØ Processando dom√≠nio: ${searchDomain}`);
    
    // Buscar o dom√≠nio
    const dominio = await prisma.dominios.findFirst({
      where: {
        dominio: searchDomain
      },
      include: {
        ssl_certificate: true
      }
    });
    
    if (!dominio) {
      console.log('‚ùå Dom√≠nio n√£o encontrado');
      return;
    }
    
    console.log('üìã Dom√≠nio encontrado:', dominio.dominio);
    console.log('   Certificado atual:', dominio.ssl_certificate?.provider || 'Nenhum');
    
    // Remover certificado atual se for auto-assinado (comportamento padr√£o)
    if (dominio.ssl_certificate && dominio.ssl_certificate.provider === 'self-signed' && AUTO_REMOVE_SELF_SIGNED) {
      console.log('üóëÔ∏è  Removendo certificado auto-assinado automaticamente...');
      console.log('   üí° Para desabilitar: export AUTO_REMOVE_SELF_SIGNED=false');
      
      // Desassociar do dom√≠nio
      await prisma.dominios.update({
        where: { id: dominio.id },
        data: {
          ssl_ativo: false,
          ssl_certificate_id: null
        }
      });
      
      // Remover certificado
      await prisma.sSL_certificates.delete({
        where: { id: dominio.ssl_certificate.id }
      });
      
      console.log('‚úÖ Certificado auto-assinado removido');
    } else if (dominio.ssl_certificate && dominio.ssl_certificate.provider === 'self-signed') {
      console.log('‚ö†Ô∏è  Certificado auto-assinado encontrado, mas remo√ß√£o autom√°tica est√° desabilitada');
      console.log('   üí° Para habilitar: export AUTO_REMOVE_SELF_SIGNED=true');
    }
    
    // Tentar ativar SSL novamente
    console.log('üîÑ Tentando ativar SSL com Let\'s Encrypt...');
    
    const response = await fetch('http://localhost:3000/api/ssl/activate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        domainId: dominio.id
      })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ SSL ativado com sucesso!');
      console.log('   Provider:', result.certificate?.provider || 'N/A');
      console.log('   Status:', result.certificate?.status || 'N/A');
      console.log('   Expira em:', result.certificate?.expires_at || 'N/A');
    } else {
      console.log('‚ùå Erro na ativa√ß√£o SSL:');
      console.log('   Status:', response.status);
      console.log('   Mensagem:', result.message || result.error);
      if (result.details) {
        console.log('   Detalhes:', result.details);
      }
    }
    
    // Verificar resultado final
    const dominioFinal = await prisma.dominios.findUnique({
      where: { id: dominio.id },
      include: {
        ssl_certificate: true
      }
    });
    
    console.log('\nüìã Status final:');
    console.log('   SSL Ativo:', dominioFinal?.ssl_ativo);
    if (dominioFinal?.ssl_certificate) {
      console.log('   Provider:', dominioFinal.ssl_certificate.provider);
      console.log('   Status:', dominioFinal.ssl_certificate.is_active ? 'Ativo' : 'Inativo');
      console.log('   Expira em:', dominioFinal.ssl_certificate.expires_at);
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    if (error.cause) {
      console.error('   Causa:', error.cause);
    }
  } finally {
    await prisma.$disconnect();
  }
}

// Suporte para par√¢metros de linha de comando
const args = process.argv.slice(2);
const targetDomain = args[0]; // Primeiro argumento √© o dom√≠nio

if (args.includes('--help') || args.includes('-h')) {
  console.log('\nüîß Uso do script force_letsencrypt.js:');
  console.log('   node force_letsencrypt.js [dominio]');
  console.log('\nüìã Exemplos:');
  console.log('   node force_letsencrypt.js                    # Usa zollim.store (padr√£o)');
  console.log('   node force_letsencrypt.js checkout.zollim.store');
  console.log('   node force_letsencrypt.js meudominio.com');
  console.log('\n‚öôÔ∏è  Vari√°veis de ambiente:');
  console.log('   AUTO_REMOVE_SELF_SIGNED=false  # Desabilita remo√ß√£o autom√°tica de certificados auto-assinados');
  console.log('\nüí° Por padr√£o, certificados auto-assinados s√£o removidos automaticamente.');
  process.exit(0);
}

forceLetsEncrypt(targetDomain);
/**
 * Script para Testar Conectividade com Banco de Dados em Produ√ß√£o
 * 
 * Execute este script no terminal do container Easypanel para verificar:
 * 1. Conectividade com PostgreSQL
 * 2. Exist√™ncia das tabelas necess√°rias
 * 3. Dados da loja Shopify
 * 4. Configura√ß√£o de dom√≠nios
 * 
 * Como usar:
 * 1. Acesse o terminal do container no Easypanel
 * 2. Execute: node test_database_connection.js
 */

const { PrismaClient } = require('@prisma/client');

async function testDatabaseConnection() {
  console.log('üîç TESTANDO CONECTIVIDADE COM BANCO DE DADOS');
  console.log('=' .repeat(50));
  
  let prisma;
  
  try {
    // Inicializar Prisma
    console.log('\n1. üîå Inicializando conex√£o com Prisma...');
    prisma = new PrismaClient({
      log: ['query', 'info', 'warn', 'error'],
    });
    
    // Testar conex√£o b√°sica
    console.log('\n2. üèì Testando conex√£o b√°sica...');
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco de dados estabelecida!');
    
    // Verificar vari√°veis de ambiente
    console.log('\n3. üîë Verificando vari√°veis de ambiente...');
    console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
    console.log(`NODE_ENV: ${process.env.NODE_ENV || 'n√£o definida'}`);
    console.log(`JWT_SECRET: ${process.env.JWT_SECRET ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
    console.log(`NEXTAUTH_SECRET: ${process.env.NEXTAUTH_SECRET ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
    
    // Testar consultas b√°sicas
    console.log('\n4. üìä Testando consultas nas tabelas principais...');
    
    // Verificar tabela loja_Shopify
    try {
      const lojas = await prisma.loja_Shopify.findMany({
        take: 5,
        select: {
          id_loja: true,
          dominio_api: true,
          nome_loja: true,
          createdAt: true
        }
      });
      console.log(`‚úÖ Tabela loja_Shopify: ${lojas.length} registros encontrados`);
      
      if (lojas.length > 0) {
        console.log('   Exemplos de lojas:');
        lojas.forEach((loja, index) => {
          console.log(`   ${index + 1}. ${loja.nome_loja || 'Sem nome'} (${loja.dominio_api})`);
        });
      }
    } catch (error) {
      console.log('‚ùå Erro ao consultar tabela loja_Shopify:', error.message);
    }
    
    // Verificar tabela dominios
    try {
      const dominios = await prisma.dominios.findMany({
        where: {
          ativo: true
        },
        take: 5,
        select: {
          id: true,
          dominio: true,
          status: true,
          ativo: true,
          id_loja: true
        }
      });
      console.log(`‚úÖ Tabela dominios (ativos): ${dominios.length} registros encontrados`);
      
      if (dominios.length > 0) {
        console.log('   Dom√≠nios ativos:');
        dominios.forEach((dominio, index) => {
          console.log(`   ${index + 1}. ${dominio.dominio} (${dominio.status}) - Loja: ${dominio.id_loja}`);
        });
      }
    } catch (error) {
      console.log('‚ùå Erro ao consultar tabela dominios:', error.message);
    }
    
    // Verificar tabela produtos
    try {
      const produtosCount = await prisma.produtos.count();
      console.log(`‚úÖ Tabela produtos: ${produtosCount} registros encontrados`);
      
      if (produtosCount > 0) {
        const produtosPorLoja = await prisma.produtos.groupBy({
          by: ['id_loja'],
          _count: {
            id: true
          },
          take: 5
        });
        
        console.log('   Produtos por loja:');
        for (const grupo of produtosPorLoja) {
          console.log(`   Loja ${grupo.id_loja}: ${grupo._count.id} produtos`);
        }
      }
    } catch (error) {
      console.log('‚ùå Erro ao consultar tabela produtos:', error.message);
    }
    
    // Verificar tabela checkout
    try {
      const checkouts = await prisma.checkout.findMany({
        take: 5,
        select: {
          id: true,
          id_loja: true,
          Tema: true,
          createdAt: true
        }
      });
      console.log(`‚úÖ Tabela checkout: ${checkouts.length} registros encontrados`);
      
      if (checkouts.length > 0) {
        console.log('   Configura√ß√µes de checkout:');
        checkouts.forEach((checkout, index) => {
          console.log(`   ${index + 1}. Loja ${checkout.id_loja} - Tema: ${checkout.Tema || 'default'}`);
        });
      }
    } catch (error) {
      console.log('‚ùå Erro ao consultar tabela checkout:', error.message);
    }
    
    // Teste espec√≠fico: buscar loja por dom√≠nio (simular API)
    console.log('\n5. üîç Teste espec√≠fico: Buscar loja por dom√≠nio...');
    console.log('üí° Para testar com sua loja, edite a vari√°vel TEST_DOMAIN abaixo');
    
    const TEST_DOMAIN = 'sua-loja.myshopify.com'; // EDITE AQUI COM SEU DOM√çNIO REAL
    
    try {
      const lojaShopify = await prisma.loja_Shopify.findFirst({
        where: {
          dominio_api: TEST_DOMAIN
        },
        include: {
          produtos: {
            take: 3,
            select: {
              id: true,
              nome: true,
              shopify_produto_id: true
            }
          }
        }
      });
      
      if (lojaShopify) {
        console.log(`‚úÖ Loja encontrada: ${lojaShopify.nome_loja || 'Sem nome'}`);
        console.log(`   ID: ${lojaShopify.id_loja}`);
        console.log(`   Dom√≠nio: ${lojaShopify.dominio_api}`);
        console.log(`   Produtos: ${lojaShopify.produtos.length}`);
        
        // Verificar dom√≠nio personalizado
        const dominio = await prisma.dominios.findFirst({
          where: {
            id_loja: lojaShopify.id_loja,
            ativo: true,
            OR: [
              { status: 'verified' },
              { status: 'active' }
            ]
          }
        });
        
        if (dominio) {
          console.log(`‚úÖ Dom√≠nio personalizado: checkout.${dominio.dominio} (${dominio.status})`);
        } else {
          console.log('‚ùå Dom√≠nio personalizado n√£o configurado ou inativo');
          console.log('   üîß SOLU√á√ÉO: Configure um dom√≠nio na aba "Dom√≠nio" do dashboard');
        }
        
        // Verificar configura√ß√£o de checkout
        const checkout = await prisma.checkout.findFirst({
          where: {
            id_loja: lojaShopify.id_loja
          }
        });
        
        if (checkout) {
          console.log(`‚úÖ Configura√ß√£o de checkout encontrada (Tema: ${checkout.Tema || 'default'})`);
        } else {
          console.log('‚ö†Ô∏è Configura√ß√£o de checkout n√£o encontrada');
        }
        
      } else {
        console.log(`‚ùå Loja n√£o encontrada para o dom√≠nio: ${TEST_DOMAIN}`);
        console.log('   üîß SOLU√á√ÉO: Verifique se a loja est√° cadastrada no banco de dados');
      }
    } catch (error) {
      console.log('‚ùå Erro ao buscar loja:', error.message);
    }
    
    // Resumo final
    console.log('\n' + '='.repeat(50));
    console.log('üìã RESUMO DO DIAGN√ìSTICO:');
    console.log('\n‚úÖ SUCESSOS:');
    console.log('- Conex√£o com banco de dados estabelecida');
    console.log('- Tabelas principais acess√≠veis');
    
    console.log('\nüîß PR√ìXIMOS PASSOS:');
    console.log('1. Edite TEST_DOMAIN com o dom√≠nio real da sua loja');
    console.log('2. Execute novamente para testar com dados reais');
    console.log('3. Se a loja n√£o for encontrada, cadastre-a no dashboard');
    console.log('4. Se o dom√≠nio n√£o estiver configurado, configure na aba "Dom√≠nio"');
    console.log('5. Teste a API: curl "https://checkout.pesquisaencomenda.online/api/shopify/config?domain=SEU_DOMINIO"');
    
  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO:', error.message);
    console.error('\nüîß POSS√çVEIS CAUSAS:');
    console.error('1. DATABASE_URL n√£o configurada ou inv√°lida');
    console.error('2. Banco de dados inacess√≠vel');
    console.error('3. Credenciais de banco incorretas');
    console.error('4. Firewall bloqueando conex√£o');
    console.error('\nDetalhes do erro:', error);
  } finally {
    if (prisma) {
      await prisma.$disconnect();
      console.log('\nüîå Conex√£o com banco de dados encerrada.');
    }
  }
}

// Executar teste
if (require.main === module) {
  testDatabaseConnection()
    .then(() => {
      console.log('\n‚úÖ Teste conclu√≠do!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Teste falhou:', error);
      process.exit(1);
    });
}

module.exports = { testDatabaseConnection };
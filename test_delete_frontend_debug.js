// Usando fetch nativo do Node.js 18+

// Fun√ß√£o para fazer login e obter token
async function login() {
  try {
    const response = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: 'teste',
        password: 'teste'
      })
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Login realizado com sucesso');
      return data.token;
    } else {
      console.log('‚ùå Erro no login:', response.status);
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o de login:', error.message);
    return null;
  }
}

// Fun√ß√£o para listar dom√≠nios
async function listDomains() {
  try {
    const response = await fetch('http://localhost:3000/api/dominios');
    if (response.ok) {
      const domains = await response.json();
      console.log('üìã Dom√≠nios encontrados:', domains.length);
      domains.forEach(domain => {
        console.log(`  - ID: ${domain.id}, Dom√≠nio: ${domain.dominio}`);
      });
      return domains;
    } else {
      console.log('‚ùå Erro ao listar dom√≠nios:', response.status);
      return [];
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o de dom√≠nios:', error.message);
    return [];
  }
}

// Fun√ß√£o para testar a exclus√£o
async function testDelete(token, domainId) {
  try {
    console.log(`üóëÔ∏è Testando exclus√£o do dom√≠nio ID: ${domainId}`);
    
    const response = await fetch(`http://localhost:3000/api/cloudflare/domains/delete?id=${domainId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    console.log('üìä Status da resposta:', response.status);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Exclus√£o bem-sucedida:', result);
      return true;
    } else {
      const errorData = await response.json();
      console.log('‚ùå Erro na exclus√£o:', errorData);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o de exclus√£o:', error.message);
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üîç Iniciando teste de debug do bot√£o de exclus√£o...');
  
  // 1. Fazer login
  const token = await login();
  if (!token) {
    console.log('‚ùå N√£o foi poss√≠vel obter token. Encerrando teste.');
    return;
  }
  
  // 2. Listar dom√≠nios
  const domains = await listDomains();
  if (domains.length === 0) {
    console.log('‚ÑπÔ∏è Nenhum dom√≠nio encontrado para testar exclus√£o.');
    return;
  }
  
  // 3. Testar exclus√£o do primeiro dom√≠nio
  const firstDomain = domains[0];
  console.log(`üéØ Selecionado para teste: ${firstDomain.dominio} (ID: ${firstDomain.id})`);
  
  const deleteSuccess = await testDelete(token, firstDomain.id);
  
  if (deleteSuccess) {
    console.log('‚úÖ Teste de exclus√£o conclu√≠do com sucesso!');
    
    // Verificar se o dom√≠nio foi realmente removido
    console.log('üîç Verificando se o dom√≠nio foi removido...');
    const domainsAfter = await listDomains();
    const stillExists = domainsAfter.find(d => d.id === firstDomain.id);
    
    if (stillExists) {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: Dom√≠nio ainda existe no banco ap√≥s exclus√£o!');
    } else {
      console.log('‚úÖ Dom√≠nio removido com sucesso do banco de dados!');
    }
  } else {
    console.log('‚ùå Teste de exclus√£o falhou.');
  }
}

main().catch(console.error);